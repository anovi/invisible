(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{304:function(t,e,n){"use strict";n.r(e);var r={head:{title:"Integrate code"},mounted:function(){this.buildTOC()}},o=n(7),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("main",[n("h1",{staticClass:"mb-01"},[t._v("Integrate code")]),t._v(" "),t._m(0),t._v(" "),n("Header",{attrs:{level:2,name:"webpack"}},[t._v("Webpack")]),t._v(" "),n("Header",{attrs:{level:3,name:"webpack-stylus"}},[t._v("Importing Stylus")]),t._v(" "),n("p",[t._v("To have the full potential and customization of Setka, use the source files as a part of your project’s bundling process.")]),t._v(" "),n("p",[t._v("Import Setka, override "),n("nuxt-link",{attrs:{to:"/vars"}},[t._v("built-in variables")]),t._v(", then generate Setka's styles:")],1),t._v(" "),n("source-code",{attrs:{height:6}},[n("code",{staticClass:"stylus"},[t._v('@import "~setka/index"\n\n// Set variables            \n\n// Generaate Setka\'s styles\nsetka()')])]),t._v(" "),t._m(1),t._v(" "),n("source-code",{attrs:{height:23}},[n("code",{staticClass:"javascript"},[t._v("...\nmodule: {\n    rules: [{\n        test: /\\.(styl)$/,\n        use: [{\n            loader: 'style-loader', // inject CSS to page\n        }, {\n            loader: 'css-loader', // translates CSS into CommonJS modules\n        }, {\n            loader: 'postcss-loader', // Run post css actions\n            options: {\n                plugins: function () {\n                    return [\n                        require('autoprefixer')\n                    ];\n                }\n            }\n        }, {\n            loader: 'stylus-loader' // compiles Stylus to CSS\n        }]\n    }]\n},\n...")])]),t._v(" "),n("Header",{attrs:{level:3,name:"webpack-css"}},[t._v("Importing CSS")]),t._v(" "),n("p",[t._v("Alternatively, you may use Setka's compiled CSS by simply adding this line to your project’s entry point:")]),t._v(" "),n("source-code",{attrs:{height:1}},[n("code",{staticClass:"javascript"},[t._v("import 'setka/dist/setka.min.css';")])]),t._v(" "),t._m(2),t._v(" "),n("source-code",{attrs:{height:9}},[n("code",{staticClass:"javascript"},[t._v("...\nmodule: {\n    rules: [\n        {\n            test: /\\.css$/,\n            use: ['style-loader', 'css-loader']\n        }\n    ]\n}\n...")])]),t._v(" "),n("Header",{attrs:{level:2,name:"gulp"}},[t._v("Gulp")]),t._v(" "),t._m(3),t._v(" "),n("source-code",{attrs:{height:13}},[n("code",{staticClass:"javscript"},[t._v("const gulp = require('gulp');\nconst setka = require('setka');\nconst stylus = require('gulp-stylus');\n\ngulp.task('build', function () {\n  return gulp.src('./styles.styl')\n    .pipe(stylus({\n      use: setka()\n    }))\n    .pipe(gulp.dest('./dist'));\n});\n\ngulp.task('default', [ 'build' ]);")])]),t._v(" "),t._m(4),t._v(" "),n("source-code",{attrs:{height:6}},[n("code",{staticClass:"stylus"},[t._v("@import 'setka'\n\n// Set variables\n\n// Build Setka's CSS\nsetka()")])])],1)}),[function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"subheader mt-0"},[this._v("Integrate Setka's code into your project’s bundling process. You will find all of these in the "),e("a",{attrs:{href:"https://github.com/anovi/setka/tree/master/examples",target:"_blank"}},[this._v("examples directory")]),this._v(" of the repository.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("For compiling styles, install and use the required loaders: "),n("a",{attrs:{href:"https://github.com/shama/stylus-loader",target:"_blank"}},[t._v("stylus-loader")]),t._v(", "),n("a",{attrs:{href:"https://github.com/postcss/postcss-loader",target:"_blank"}},[t._v("postcss-loader")]),t._v(" with "),n("a",{attrs:{href:"https://github.com/postcss/autoprefixer#webpack",tabindex:"_blank"}},[t._v("Autoprefixer")]),t._v(". Minimal setup, your webpack config should include this rule or similar in "),n("code",[t._v("module: { rules: [...] }")]),t._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("In this case you may use your existing rule for "),e("code",{},[this._v("css")]),this._v(" without any special modifications to webpack config, and you only need "),e("a",{attrs:{href:"https://github.com/webpack-contrib/style-loader"}},[this._v("style-loader")]),this._v(" and "),e("a",{attrs:{href:"https://github.com/webpack-contrib/css-loader"}},[this._v("css-loader")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("For building CSS from source code with "),e("a",{attrs:{href:"https://gulpjs.com/",target:"_blank"}},[this._v("Gulp")]),this._v(", minimal "),e("code",[this._v("gulpfile.js")]),this._v(" configuration should be:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("And in "),e("code",[this._v("styles.styl")]),this._v(" import Setka and build CSS:")])}],!1,null,null,null);e.default=component.exports}}]);